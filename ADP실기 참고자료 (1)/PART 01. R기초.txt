
# ADP 실기 교재 내 R코드

#################################################################
#                    PART 01) R 기초             
#################################################################



##===============================================================
##### 2장. R 기본
##### 3절 | 데이터 타입

##### 1. 스칼라

##### 가. 숫자형(numeric)
a<-1      # a라는 변수에 정수 1 저장
b<-2.7    # b라는 변수에 소수 2.7 저장
a         # a 출력
b         # b 출력

mode(a)   # a변수의 데이터 타입 확인
mode(b)   # b변수의 데이터 타입 확인


##### 나. 문자형(character)
a<-"가" # a라는 변수에 "가" 저장
mode(a)

b<-"1"
c<-"2"
b+c     # 문자형 데이터에 대한 연산을 실행할 시, 에러 발생


##### 다. 논리형 (logical)
a<-TRUE   # a 변수에 논리값 TRUE 저장
mode(a)   # a의 타입 확인 : logical(논리형)

b<-FALSE
a+b       # 논리형 데이터는 산술연산이 가능


##### 라. 팩터형 (factor)
factor(c("m","m","f","f","f"), levels=c("f","m"), 
       labels=c("여","남"), ordered=F)



##### 2. 벡터

##### 가. 벡터의 생성

# 1,2,3이 저장된 벡터를 변수 a에 저장 (c() 사용)
a<-c(1,2,3)  
a

# 1,2,3이 저장된 벡터를 변수 b에 저장 (: 사용)
b<-1:3
b

# c(1,2,3) 을 3번 반복
rep(c(1,2,3),3)

# 1을 1번 반복, 2를 2번 반복
rep(c(1,2), c(1,2))

# 1부터 10까지 2씩 증가하는 수열을 변수 c에 저장
c<-seq(1,10,2)


##### 나. 벡터의 인덱싱
# 1~5까지의 숫자가 저장된 벡터 z 생성
z<-c(1:5)

# z출력
z

z[2]        # z벡터의 두 번째 원소 출력
z[c(1,3)]   # z벡터의 첫 번째, 세 번째 원소 출력
z[1:3]      # z벡터의 1~3번째 원소를 출력
z[-5]       # z벡터의 다섯 번째 원소만 제외하고 출력
z[z>3]      # z벡터의 원소중 3보다 큰 값만을 출력


# 1~3까지의 값이 저장된 벡터 x 생성
x<-c(1,2,3)

# x의 각 요소에 대해 Kim, Park, Lee 라는 이름을 지정
names(x)<-c("Kim","Park","Lee")


# x벡터에서 이름이 Kim인 원소 출력
x["Kim"]

# x벡터의 각 요소에 부여된 이름 출력
names(x)

# names(x)의 두 번째 값 출력
names(x)[2]


##### 다. 벡터의 연산
# 벡터의 연산 예시
x<-c(1:4)
x

x*3     # x벡터의 전체 원소에 3을 곱함
x+5     # x벡터의 전체 원소에 5를 더함

# 벡터간 연산의 예시
y<-c(5:8)
y

z<-c(1,2)
z

# 길이가 같은 벡터간 연산
x+y

# 길이가 다른 벡터간 연산
x+z



##### 3. 행렬

##### 가. 행렬의 생성

## Q) 1,2,3,4,5,6,7,8,9 가 저장된 3행3열의 행렬을 생성해보자.
## 이 때 1행부터 차례대로 r1, r2, r3이라는 행이름을 부여하고
## 1열부터 차례대로 a,b,c라는 이름을 부여하자.

## A)
# 행렬 생성
matrix(1:9, nrow=3, ncol=3, dimnames=list(c("r1","r2","r3"),c("a","b","c")))



##### 4. 데이터프레임

##### 가. 데이터프레임의 생성

## Q) 아래에 예시로 주어진 표와 같은 데이터프레임을 생성하여 
## x변수에 저장한 뒤 출력하고, x 데이터의 구조를 확인해보자.

## A)
# 데이터프레임 생성
x<-data.frame(이름=c("이유리","최민준","김민지"), 
                전공=c("경영학과","컴퓨터공학과","테이터과학과"),
                성별=c("여","남","여"), 나이=c(20,22,21))

# x 데이터 출력
x

# x 데이터의 구조 확인
str(x)



##### 5. 리스트

##### 가. 리스트의 생성

# 문자형 벡터 생성
v1<-c("가","나","다")  
# 논리형 벡터 생성
v2<-c(T,F,F)           
# 데이터프레임 생성
df<-data.frame(subject=c("미술","음악","체육"), class=c("1교시","2교시","3교시"))

# key를 지정하지 않고 리스트 생성
ls1 <- list(v1,v2,df,sum)
ls1

# key를 지정하여 리스트 생성
ls2 <- list(v1=v1,v2=v2,df=df,fun=sum)
ls2



##### 6. 배열

##### 가. 배열의 생성

## Q) 1~27까지의 숫자를 3x3행렬 3개에 저장하고 있는 배열을 생성해보자. 
## 이 때 매트릭스의 행이름은 1행, 2행, 3행, 열이름은 1열, 2열, 3열, 
## 각 매트릭스의 이름은 matrix_1, matrix_2, matrix_3으로 지정하자.

## A)
# 배열에 저장될 매트릭스의 행이름
rname=c("1행","2행","3행")  

# 배열에 저장될 매트릭스의 열이름
cname=c("1열","2열","3열")   

# 배열에 저장될 매트릭스의 이름
mname=c("matrix_1","matrix_2","matrix_3")  

ar<-array(1:27, dim=c(3,3,3), dimnames=list(rname,cname,mname))

# ar 출력
ar




##===============================================================
##### 6절 | 사용자 정의 함수

## 함수 정의 예시

## Q1) 하나의 숫자를 입력받아 제곱값을 계산하는 함수를 생성해보자.
## A1)
# 함수 생성
fun1<-function(num){  
  return(num^2)
}

# fun1함수에 숫자 2를 입력
fun1(2)


## Q2) 여러 숫자를 입력받아 합을 출력하는 함수를 생성해보자.
## A2)
# 함수 생성
fun2<-function(...){
  x<-sum(...)      
  paste("합계 : ",x)
}

# fun2 함수에 2,4,6,8,10을 입력
fun2(2,4,6,8,10)


## Q3) 중첩함수 구문을 통해 두 개의 숫자를 입력받아 두 숫자와 그 합을 출력하는 함수를 생성해보자.
## A3)
# 함수 생성
fun3<-function(x,y){
  print(x) 
  print(y)
  fun4<-function(x,y){      #fun3 함수 안에 fun4 함수를 정의
    sum<-x+y
    paste(x, "+", y, "=", sum)
  }
  fun4(x,y)                   #fun3 함수 안에서 fun4 함수를 호출
}

# fun3 함수에 3,5를 입력
fun3(3,5)




# (끝)
##===============================================================


