
# ADP 실기 교재 내 R코드

#################################################################
#                  PART 02) 데이터 전처리_1 (1~3장)             
#################################################################



##===============================================================
##### 1장. 제어문


##### 1절 | 조건문(if/else, ifelse())

##### 1. if/else
## Q) 정수를 입력받아 해당 숫자가 짝수인지 홀수인지 판단하고, 
## 만약 입력받은 숫자가 정수가 아닐 경우 “정수를 입력해주세요.”라는 
## 문구를 출력하는 if문을 작성해보자.

##===== A)
x <- 9   
if(x%%2==0){                          # x/2의 나머지가 0이면 참
  print(paste(x, "는 짝수입니다."))   # x%%2==0 조건이 참일 때 수행할 코드
}  else if (x%%2==1) {                 
  print(paste(x, "는 홀수입니다."))   # 첫째 조건이 거짓, x%%2==1 조건이 참일 때 수행할 코드    
}  else { 
  print ("정수를 입력해주세요.")      # 위의 조건 중 어느 것도 만족하지 않을 때 수행할 코드
}


##### 2. ifelse
## Q) 정수를 입력받아 짝수이면 “짝수입니다.”, 홀수이면 “홀수입니다.”를 출력하고, 
## 정수가 아닐 경우 “정수가 아닙니다.”를 출력하는 ifelse문을 작성해보자. 

##===== A)
x<-3.9
ifelse(x%%2==0, "짝수입니다.",
       ifelse(x%%2==1, "홀수입니다.", "정수가 아닙니다."))



##### 2절 | 반복문(for, while, repeat)

##### 1. for
## Q) 만약 여러분이 아래에 제시된 데이터를 콘솔창에 출력하고 싶다면 
## print 함수 구문을 4번 수행하는 대신, for문을 사용한 간단한 R 코드를 실행하여 
## 원하는 결과를 더욱 편리하게 얻을 수 있다. 
## 이를 확인하기 위해 반복문을 사용하지 않을 때와 반복문을 사용할 때를 비교해보자.

##===== A)
# 반복문을 사용하지 않은 경우 : print 함수를 4번 실행
# paste() : ()안에 나열된 문자열을 합쳐주는 함수
print(paste("The year is", 2015))       
print(paste("The year is", 2016))
print(paste("The year is", 2017))
print(paste("The year is", 2018))


# 반복문을 사용한 경우 : for문을 1번 실행
# year변수에 2015에서 2018까지의 값이 모두 대입될 때 까지 { }안의 구문이 반복
for (year in c(2015:2018)){
  print(paste("The year is", year))
}


##### 2. while
## Q) for문을 사용하여 해결했던 예제에 대해 while문을 이용해서 똑같은 결과값을 만들어보자.

##===== A)
# year변수의 값이 2018이하이면 { }안의 구문이 실행
year <- 2015          
while(year<=2018){
  print(paste("The year is", year))
  year <- year+1}


##### 3. repeat

## 알아두기

## break 사용 예시
# 1~10 까지의 숫자 중 짝수만 출력하기
i<-0
repeat{i<-i+2
print(i)
if(i>=10){
  break   # i가 10이상이면 반복문 종료
}
}


## next 사용 예시
# 1~10 까지의 숫자 중 홀수만 출력하기
# 반복문 내의 next를 만나면 print(i)를 실행하지 않고 for문의 맨 처음으로 이동
for(i in 1:10){ 
  if(i%%2==0){ next }
  print(i)
} 



##===============================================================
##### 2장. 데이터 변환


##### 1절 | 파생변수 생성

##### 1. $ : data.frame에서의 변수추가

## Q) R의 내장 데이터 iris에 행번호를 담고 있는 ‘ID’ 라는 변수를 새로 생성해보자.

##===== A)
# iris 데이터의 구조 확인 : 150개의 행과 5개의 변수를 가지고 있다.
str(iris)

# 150개 개체들의 고유번호에 해당하는 'ID' 변수를 새로 생성
iris$ID<-1:150

# iris 데이터의 상위 6개의 행을 출력한 결과, ID 변수가 추가된 것을 확인할 수 있다.
head(iris)


##### 2. [ ] : 대괄호를 활용한 변수추가

## Q) $를 이용하여 생성했던 ID 변수의 값이 짝수이면 A, 
## 홀수이면 B로 분류하는 새로운 변수(변수명 : Group)를 [ ]를 활용하여 생성해보자.

##===== A)
# ifelse 함수를 이용하여 ID가 짝수이면 A, 홀수이면 B를 부여
iris["Group"]<-ifelse(iris$ID%%2==0,"A","B")

# iris 데이터의 상위 6개의 행을 출력 : Group 변수가 추가된 것을 확인할 수 있다.
head(iris)


##### 3. transform
## Q) iris 데이터에서 Sepal.Length 변수와 Petal.Length 변수의 값을 더하여 
## ‘Sum.Length’ 라는 새로운 변수를 생성해보자.

##===== A)
transform(iris, Sum.Length=Sepal.Length + Petal.Length)


##### 4. within

## Q) 학생의 id(s1, s2, s3, s4, s5, s6)를 담은 student_id 변수와 시험점수(55, 90, 85, 71, 63, 99)를 
## 담은 score 변수로 구성된 데이터프레임을 생성하자. 
## 그 후 시험점수가 90점 이상이면 수, 80점 이상 90점 미만이면 우, 
## 70점 이상 80점 미만이면 미, 60점 이상 70점 미만이면 양, 
## 60점 이하이면 가로 분류하는 ‘grade’ 라는 변수를 새롭게 생성해보자.

##===== A)
# 학생id(student_id 변수)와 시험점수(score 변수)로 이루어진 데이터 프레임 생성
student_id <- c("s1", "s2", "s3", "s4", "s5", "s6")  # 학생id가 담긴 벡터
score <- c(55, 90, 85, 71, 63, 99)                   # 시험점수가 담긴 벡터
score_df <- data.frame(student_id, score)            # 데이터 프레임 생성
score_df

# 학생의 점수(score변수)를 수, 우, 미, 양, 가로 분류하여 'grade' 라는 새로운 변수 생성
score_df <- within(score_df, {
  grade = character(0)         # 새로운 변수의 데이터 타입 지정 (생략 가능)
  grade[ score < 60 ] = "가"   # score가 60미만인 경우 grade에 “가” 입력
  grade[ score >=60 & score < 70 ] = "양" 
  grade[ score >=70 & score < 80 ] = "미"
  grade[ score >=80 & score < 90 ] = "우" 
  grade[ score >=90 ] = "수" 
  grade = factor(grade, level = c("수", "우", "미", "양", "가")) 
  # grade변수를 "수", "우", "미", "양", "가"의 범주로 이루어진 팩터로 변환
})

# score_df 출력 : grade 변수가 추가된 것을 확인할 수 있다.
score_df




##### 2절 | 변수 축소

##### 1. 주성분분석

## Q) R에 내장된 USArrests 데이터는 1973년 미국 50개주 100,000명의 인구 당 
## 체포된 세 가지 강력범죄수(assault, murder, rape)와 각 주마다 도시에 거주하는 
## 인구의 비율(%)로 구성되어있다. 주성분 분석을 수행하여 해당 데이터의 변수들을 
## 가장 잘 요약하는 주성분을 구하고 해석해보자.

##===== A)
# ① 데이터 확인 및 산점도를 통해 변수 간 상관관계 파악
library(datasets)
data(USArrests)

head(USArrests)

#산점도를 통해 변수간 상관관계 파악
# pairs() : 둘 이상의 변수에 대해 모든 가능한 산점도를 그려줌
pairs(USArrests, panel = panel.smooth, main = "USArrests data")



# ② 주성분분석 수행
US.prin<-princomp(USArrests, cor=TRUE)
summary(US.prin)               

# screeplot 그리기
# 주성분분석의 결과를 plot함수 인자값으로 지정하면 scree plot이 생성된다.
plot(US.prin,type='l')

# ③ Loading
US.prin$loadings               

# ④ Scores
US.prin$scores 

# ⑤ 제 1-2 주성분에 의한 행렬도
biplot(US.prin, scale=0)                


##### 2. 요인분석

## Q) R의 내장 데이터 swiss는 1888년 경 스위스 내 47개 주의 사회 경제적 지표(교육, 농업 종사자 비율 등)와 
## 출산율에 대한 데이터이다. 원활한 분석을 위해 먼저 해당 데이터의 5가지 변수들을 min-max 정규화한 뒤, 
## 요인분석을 실시하여 변수들을 3개의 요인으로 축소해보자.(factanal 함수 사용)

##===== A)
# swiss 데이터 확인 
data(swiss)
str(swiss)

# 정규화 수행 및 실습용 데이터 생성
# apply(데이터, 계산방향, 적용함수) : 주어진 데이터의 행 혹은 열 방향으로 함수를 적용
Min <- apply(swiss,2,min) 
Max <- apply(swiss,2,max)
swiss_fa<-scale(swiss, center=Min, scale=(Max-Min))

head(swiss_fa)

# 요인분석 수행
# factanal함수 rotation 인자의 기본값은 "varimax"임
factanal(swiss_fa, factors=3) 




##### 3절 | 표준화와 정규화

##### 1. 표준화

## Q) R의 내장 데이터 ‘mtcars’의 mpg(마일)변수와 hp(총마력)변수로만 이루어진 
## 데이터프레임(test.cars)을 생성하고, 각 변수를 표준화한 새로운 변수를 추가해보자. 
## (mpg를 표준화한 변수의 이름은 mpg_scale, hp를 표준화한 변수의 이름은 hp_scale로 지정)

##===== A)
# 데이터 확인 
data("mtcars")
str(mtcars)

# 데이터프레임 생성
test.cars<-mtcars[,c("mpg","hp")]

# test.cars데이터의 상위 6개의 행 확인
head(test.cars)

# 표준화한 변수 추가
test.cars<-transform(test.cars,
                     mpg_scale=scale(test.cars$mpg),
                     hp_scale=scale(test.cars$hp))
head(test.cars)


##### 2. 정규화

## 가. scale함수 이용
## scale 함수를 이용하여 R의 내장 데이터 iris의 Sepal.Length 변수를 정규화하는 코드를 살펴보자.

# iris데이터 Sepal.Length  변수의 최솟값 저장
Min<-min(iris$Sepal.Length)

# iris데이터 Sepal.Length 변수의 최댓값 저장
Max<-max(iris$Sepal.Length)

# scale함수를 활용한 min-max 표준화
iris$SL_new<-scale(iris$Sepal.Length, center=Min, scale=Max-Min)

head(iris)


## 나. 사용자 정의 함수 이용

# 정규화한 값을 반환하는 함수 정의
# x : 정규화하고자 하는 숫자형 벡터
normalize <-function(x) {
  return ((x-min(x)) / (max(x) -min(x)))
}

# 숫자형 벡터 생성
num<-c(50:500)

# 생성한 사용자 정의 함수를 이용하여 정규화 수행
num_new<-normalize(num) 
head(num_new)




##===============================================================
##### 3장. 데이터 결합 및 요약


##### 1절 | 데이터 결합

##### 1. rbind

## Q) id와 last_name이라는 변수로 이루어진 두 개의 데이터프레임을 생성한 후, 
## 두 데이터프레임을 행 기준으로 결합하여 고객의 아이디와 성을 저장하고 있는 
## 하나의 데이터프레임으로 만들어 보자. 

##===== A)
# 행으로 묶을 데이터 생성 : rbind를 사용할 때에는 열의 이름과 개수가 동일해야 함
customer1 <- data.frame(id = c("c01","c02","c03","c04"),
                        last_name = c("Lee", "Kim", "Choi", "Park"))

customer2 <- data.frame(id = c("c05", "c06", "c07"), 
                        last_name = c("Lim" , "Bae", "Kim"))

# rbind를 사용하여 두 데이터프레임을 결합
id_name <- rbind(customer1, customer2)    
id_name    


##### 2. cbind

## Q) 고객의 나이(age)와 수입(income)을 담고 있는 데이터(age_income)를 새로 생성하고, 
## rbind 함수 예제에서 생성했던 id_name 데이터와 열을 기준으로 결합하여 customer 데이터를 만들어보자.

##===== A)
# 열로 묶을 데이터 생성 : cbind를 사용할 때에는 행의 개수가 동일해야 함
# age변수와 income변수로 구성된 데이터프레임 생성
age_income <- data.frame(age = c(20, 25, 37, 40, 32, 45, 37), 
                         income = c(2500, 6400, 0, 7000, 3400, 3800, 5010))

# cbind를 사용하여 두 데이터프레임을 결합
customer <- cbind(id_name, age_income)     
customer


##### 3. merge
## Q) 고객의 아이디(id), 이름(name)으로 이루어진 데이터프레임(id_name)과 고객의 아이디(id), 
## 번호(number)로 이루어진 데이터프레임(id_number)을 생성한 뒤, 다양한 방법으로 두 데이터를 병합해 보자.

##===== A)
# 병합에 사용할 데이터프레임 생성
id_name <- data.frame(id = c("c01","c02","c03","c04","c05", "c06", "c07"), 
                      last_name = c("Lee", "Kim", "Choi", "Park", "Lim" , "Bae", "Kim"))

id_number <- data.frame(id = c("c03", "c04", "c05", "c06", "c07", "c08", "c09"), 
                        number = c(3, 1, 0, 7, 3, 4, 1))

# id_name, id_number 데이터프레임 확인
id_name
id_number


## Q1) id 칼럼을 기준으로 두 테이블이 모두 공통된 값을 가지고 있는 경우에만 
## 두 데이터(id_name, id_number)를 병합해 보자. (데이터베이스의 Inner Join에 해당)
merge(id_name, id_number, by = 'id')


## Q2) 공통된 값이 없는 경우에도 데이터가 출력되도록 id 칼럼을 기준으로 두 데이터(id_name, id_number)의 
## 모든 행을 병합해 보자. (데이터베이스의 Outer Join에 해당)
# 기준칼럼에 공통된 값이 없는 경우, 다른 변수 값 자리에는 NA가 채워짐
merge(id_name, id_number, by = 'id', all = T) 


## Q3) id 칼럼을 기준으로 두 데이터(id_name, id_number)를 병합하는데, 기준칼럼에 공통 값이 없는 경우에는 
## id_name 데이터를 기준으로 병합해보자. (데이터베이스의 Left Outer Join에 해당)
merge(id_name, id_number,  by = 'id', all.x = T)


## Q4) id 칼럼을 기준으로 두 데이터(id_name, id_number)를 병합하는데, 
## 기준칼럼에 공통 값이 없는 경우에는 id_number 데이터를 기준으로 병합해보자. 
## (데이터베이스의 Right Outer Join에 해당)
merge(id_name, id_number, by = 'id', all.y = T)




##### 2절 | 데이터 요약

##### 1. aggregate

## Q1) iris 데이터에서 종별 Sepal.Width의 평균을 구해보자.
aggregate(Sepal.Width~Species, iris, mean)

## Q2) iris 데이터에서 종별 Sepal.Width, Petal.Width 의 평균을 한 번에 구해보자.
aggregate(cbind(Sepal.Width, Petal.Width)~Species, iris, mean)


##### 2. table

## Q1) 내장데이터 Titanic은 타이타닉호 탑승자들의 특성에 따른 생존여부를 기록해놓은 데이터이다.
## Titanic이 데이터에서 좌석등급을 의미하는 Class 변수에 대해서 도수분포표를 생성해보자.

##===== A)
# 내장데이터 Titanic의 구조 확인
str(Titanic)

# 분석을 위해 Titanic 데이터를 데이터프레임으로 변환한 뒤 다시 한번 구조를 확인
# as.data.frame() : 객체를 데이터프레임으로 변환
Titanic<-as.data.frame(Titanic)   

str(Titanic)   # 데이터 구조가 데이터프레임으로 변환되었음을 확인 가능

# table함수를 이용하여 범주형 변수 Class에 대한 도수분포표를 생성
table(Titanic$Class)


## Q2) 내장데이터 Titanic에서 Survived 변수는 승객의 생존여부를 의미한다. 
## 좌석등급과 생존여부의 관계를 살펴보기 위해 
## Class 변수에 따른 Survived 변수의 도수를 표 형태로 나타내보자.
table(Titanic$Class, Titanic$Survived)


##### 3. prop.table

## Q) Titanic 데이터에서 Age 변수는 해당 승객이 어른인지 아이인지의 여부를 나타낸다. 
## Age 변수에 따른 생존여부의 관계를 전체에 대한 비율, 행별 비율, 열별 비율로 살펴보자.

##===== A)
# Age에 따른 Survived에 대한 비율을 파악
prop.table(table(Titanic$Age, Titanic$Survived))

# 행 별 비율 파악
prop.table(table(Titanic$Age, Titanic$Survived), 1)  

# 열 별 비율 파악
prop.table(table(Titanic$Age, Titanic$Survived), 2)  


##### 4. subset

## Q) 내장데이터 iris에서 종(Species)이 setosa이면서, 
## Sepal.Length의 값이 5.5초과인 데이터들의 Species와 Sepal.Length 변수값만 조회해보자. 

##===== A)
subset(iris,
       subset = (Species=='setosa' & Sepal.Length > 5.5),
       select = c(Species,Sepal.Length))




##### 3절 | apply 계열 함수

##### 1. apply

## Q1) 4행 3열로 이루어진 행렬을 만든 후에 각 행별로 max 값을 구해보자.
a <- matrix(1:12, nrow=4, ncol=3)        # matrix 생성 
apply(a, 1, max)                         # 1은 행 방향, 2는 열 방향으로 계산함을 의미

## Q2) iris 데이터의 1~4열에 대해서 평균을 구해보자.
apply(iris[,1:4], 2, mean) 



##### 2. lapply
## Q) lapply함수를 사용하여 숫자가 저장된 벡터의 값을 제곱한 뒤 리스트 형태로 반환해보자.

##===== A)
a <- c(1,2,3)                      # a는 1,2,3의 숫자가 저장된 벡터
lapply(a, FUN=function(x){x^2})    # FUN인자의 값으로 제곱을 계산해주는 사용자 정의 함수를 사용

# 데이터구조 확인하기 : lapply 함수의 적용 결과 반환되는 데이터는 리스트임을 알 수 있음
class(lapply(a, FUN=function(x){x^2})) # class() : 객체의 물리적 자료형 반환 

# 만약 리스트로 반환된 결과를 벡터로 변환하고 싶다면 unlist함수를 이용하여 원하는 결과를 얻을 수 있음
b<-lapply(a, FUN=function(x){x^2})     # lapply를 적용한 결과를 변수 b에 저장
unlist(b)                              # unlist함수를 이용하여 리스트 b를 벡터로 변환



##### 3. sapply
## Q1) iris 데이터에서 각 컬럼별 데이터 타입을 구해보자.
sapply(iris, class)

# 데이터구조 확인 : 변수마다 함수를 적용한 결과 값이 하나씩 존재하므로 문자형 벡터로 반환
class(sapply(iris, class))  # “character”는 문자를 저장한 벡터를 의미


## Q2) iris 데이터에서 각 컬럼에 summary함수를 적용해보자.
sapply(iris, summary)       # summary() : 데이터의 기초 통계량을 요약해주는 함수           

# 데이터구조 확인 : 변수마다 함수를 적용한 결과 값의 길이가 다르므로 리스트로 반환
class(sapply(iris, summary))



##### 4. vapply
## Q) 1~100까지의 숫자가 저장된 리스트에 fivenum함수를 적용한 후, 
## 각 값에 이름을 부여하여 리스트 형태로 출력해보자.

##===== A)
# fivenum() : 최소값, 1사분위수, 중위수, 3사분위수, 최대값을 차례로 출력
# 1~100까지의 숫자가 저장된 벡터 생성
test <- c(1:100)

# fivenum 함수를 적용
fivenum(test)

# vapply를 이용하여 fivenum 함수를 적용하는데, 출력되는 결과의 형식(Template)을 원하는대로 지정
test <- list(test) #출력형태를 리스트로 변환

#출력되는 결과의 양식(Template)을 Min, Q1, Median, Q3, Max 로 지정
test2 <- vapply(test, fivenum, c("Min" = 0, "Q1" = 0, "Median" = 0, "Q3" = 0, "Max" = 0))
test2



##### 5. mapply
## Q) 1을 4번, 2를 3번, 3을 2번, 4를 1번 반복하는 4개의 수열을 구해보자. 
## 이 때 rep 함수를 이용할 때와 mapply 함수를 이용 할 때를 비교해보자.

##===== A)
# 1) rep을 사용할 경우 총 4번의 R 코드를 실행해야 한다.
#   rep(x, times, ... )
#   x: 반복할 객체, times: 반복횟수
rep(1,4)
rep(2,3)
rep(3,2)
rep(4,1) 


# 2) mapply를 사용할 경우 1번의 R 코드 실행으로 동일한 결과를 얻을 수 있다. 
# rep함수의 x 인자값 : c(1:4), times 인자값 : c(4:1)
mapply(rep, c(1:4), c(4:1))     



##### 6. tapply
## Q1) R의 googleVis 패키지에 있는 Fruits 데이터에서 과일종류(Fruit)별 판매량(Profit)의 평균을 구해보자.

# googleVis 패키지의 Fruits 데이터를 이용하기 위해 패키지 설치 및 로드
install.packages("googleVis")
library(googleVis)

# Fruits 데이터의 상위 6개의 행 확인
head(Fruits)

# tapply 함수를 이용하여 과일종류별 판매량의 평균 산출
tapply(Fruits$Sales, Fruits$Fruit, mean)


## Q2) Fruits 데이터에서 Location이 West인 것과 아닌 것으로 그룹을 지정하여 Profit의 평균을 구해보자.

# INDEX인자에 비교구문을 사용하여 그룹을 지정
tapply(Fruits$Profit, Fruits$Location=="West", mean)




# (끝)
##===============================================================


